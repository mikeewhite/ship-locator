version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.3.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TOOLS_LOG4J_LOGLEVEL: ERROR

  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:9092'
      SCHEMA_REGISTRY_LOG4J_ROOT_LOGLEVEL: WARN

  postgres:
    image: postgres
    hostname: postgres
    container_name: postgres
    restart: always
    environment:
      - PGUSER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ship_db
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./backend/migrations/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    ports:
      - "5432:5432"
    logging:
      options:
        max-size: 10m
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10

  postgres-test:
    image: postgres
    hostname: postgres-test
    container_name: postgres-test
    restart: always
    environment:
      - PGUSER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ship_db
    volumes:
      - ./backend/migrations/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    ports:
      - "5433:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10

  pgadmin:
    hostname: pgadmin
    container_name: pgadmin
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin4/servers.json:/pgadmin4/servers.json
      - pgadmin_data:/var/lib/pgadmin

  collector:
    hostname: collector
    container_name: collector
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: collector
    environment:
      - SHIPLOC_WEBSOCKETAPIKEY
      - SHIPLOC_KAFKAADDRESS=kafka:9092
    command: ./collector
    depends_on:
      - kafka
    restart: unless-stopped

  service:
    hostname: service
    container_name: service
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: service
    environment:
      - SHIPLOC_KAFKAADDRESS=kafka:9092
      - SHIPLOC_POSTGRESADDRESS=postgres:5432
    command: ./service
    ports:
      - "8085:8085"
    depends_on:
      - kafka
      - postgres
    restart: unless-stopped

  dashboard:
    hostname: dashboard
    container_name: dashboard
    build:
      context: ./frontend/dashboard
      dockerfile: Dockerfile
    environment:
      - REACT_APP_GOOGLE_MAPS_API_KEY
    ports:
      - "3001:3000"
    restart: unless-stopped

volumes:
  pgdata:
  pgadmin_data:
